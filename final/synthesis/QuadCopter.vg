/////////////////////////////////////////////////////////////
// Created by: Synopsys DC Expert(TM) in wire load mode
// Version   : M-2016.12
// Date      : Mon Dec 11 10:57:12 2017
/////////////////////////////////////////////////////////////


module QuadCopter ( clk, RST_n, SS_n, SCLK, MOSI, MISO, INT, RX, TX, LED, FRNT, 
        BCK, LFT, RGHT, SS_A2D_n, SCLK_A2D, MOSI_A2D, MISO_A2D );
  output [7:0] LED;
  input clk, RST_n, MISO, INT, RX, MISO_A2D;
  output SS_n, SCLK, MOSI, TX, FRNT, BCK, LFT, RGHT, SS_A2D_n, SCLK_A2D,
         MOSI_A2D;
  wire   \*Logic1* , \*Logic0* , rst_n, clr_cmd_rdy, cmd_rdy, send_resp,
         strt_cal, inertial_cal, motors_off, cal_done, strt_cnv, cnv_cmplt,
         vld, n8;
  wire   [7:0] cmd;
  wire   [15:0] data;
  wire   [7:0] resp;
  wire   [15:0] d_ptch;
  wire   [15:0] d_roll;
  wire   [15:0] d_yaw;
  wire   [8:0] thrst;
  wire   [11:0] batt_level;
  wire   [15:0] ptch;
  wire   [15:0] roll;
  wire   [15:0] yaw;
  wire   [10:0] frnt_spd;
  wire   [10:0] bck_spd;
  wire   [10:0] lft_spd;
  wire   [10:0] rght_spd;
  wire   SYNOPSYS_UNCONNECTED__0, SYNOPSYS_UNCONNECTED__1, 
        SYNOPSYS_UNCONNECTED__2, SYNOPSYS_UNCONNECTED__3;
  assign LED[0] = \*Logic1* ;

  UART_wrapper iUART ( .clk(clk), .rst_n(n8), .clr_cmd_rdy(clr_cmd_rdy), 
        .cmd_rdy(cmd_rdy), .cmd(cmd), .data(data), .RX(RX), .TX(TX), .resp(
        resp), .send_resp(send_resp) );
  cmd_cfg iCMD ( .clk(clk), .rst_n(n8), .cmd_rdy(cmd_rdy), .cmd(cmd), .data(
        data), .clr_cmd_rdy(clr_cmd_rdy), .resp(resp), .send_resp(send_resp), 
        .d_ptch(d_ptch), .d_roll(d_roll), .d_yaw(d_yaw), .thrst(thrst), .batt(
        batt_level[11:4]), .strt_cal(strt_cal), .inertial_cal(inertial_cal), 
        .cal_done(cal_done), .motors_off(motors_off), .strt_cnv(strt_cnv), 
        .cnv_cmplt(cnv_cmplt) );
  inert_intf_COUNT_WIDTH11 iNEMO ( .clk(clk), .rst_n(n8), .SS_n(SS_n), .SCLK(
        SCLK), .MOSI(MOSI), .MISO(MISO), .INT(INT), .strt_cal(strt_cal), 
        .ptch(ptch), .roll(roll), .yaw(yaw), .cal_done(cal_done), .vld(vld) );
  flght_cntrl ifly ( .clk(clk), .rst_n(n8), .vld(vld), .inertial_cal(
        inertial_cal), .d_ptch(d_ptch), .d_roll(d_roll), .d_yaw(d_yaw), .ptch(
        ptch), .roll(roll), .yaw(yaw), .thrst(thrst), .frnt_spd(frnt_spd), 
        .bck_spd(bck_spd), .lft_spd(lft_spd), .rght_spd(rght_spd) );
  ESCs iESC ( .clk(clk), .rst_n(n8), .frnt_spd(frnt_spd), .bck_spd(bck_spd), 
        .lft_spd(lft_spd), .rght_spd(rght_spd), .motors_off(motors_off), 
        .frnt(FRNT), .bck(BCK), .lft(LFT), .rght(RGHT) );
  A2D_intf iA2D ( .clk(clk), .rst_n(n8), .strt_cnv(strt_cnv), .chnnl({
        \*Logic0* , \*Logic0* , \*Logic0* }), .cnv_cmplt(cnv_cmplt), .res({
        batt_level[11:4], SYNOPSYS_UNCONNECTED__0, SYNOPSYS_UNCONNECTED__1, 
        SYNOPSYS_UNCONNECTED__2, SYNOPSYS_UNCONNECTED__3}), .SS_n(SS_A2D_n), 
        .SCLK(SCLK_A2D), .MOSI(MOSI_A2D), .MISO(MISO_A2D) );
  reset_synch iRST ( .RST_n(RST_n), .clk(clk), .rst_n(rst_n) );
  TIEHBWP U3 ( .Z(LED[7]) );
  TIELBWP U4 ( .ZN(LED[6]) );
  TIELBWP U5 ( .ZN(LED[5]) );
  TIEHBWP U6 ( .Z(LED[4]) );
  TIEHBWP U7 ( .Z(LED[3]) );
  TIELBWP U8 ( .ZN(LED[2]) );
  TIELBWP U9 ( .ZN(LED[1]) );
  CKBD1BWP U10 ( .I(rst_n), .Z(n8) );
  TIEHBWP U11 ( .Z(\*Logic1* ) );
  TIELBWP U12 ( .ZN(\*Logic0* ) );
endmodule

